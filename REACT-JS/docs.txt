⚛️ React Summary

React is a JavaScript library for building user interfaces, created by Facebook.
It’s component-based, declarative, and makes building dynamic web apps efficient.

🧩 Key Concepts
Concept	Description
Components	            Reusable building blocks of UI (functions returning JSX).
JSX	                    JavaScript + HTML syntax combined.
Props	                Inputs to components, passed like function arguments.
State	                Internal data that can change over time (with useState).
Hooks	                Functions like useState, useEffect to add React features to components.
Virtual DOM	React’s     optimized in-memory DOM for faster UI updates.

You can create a React app in two main ways:

🔹 Method 1: Using Vite (Fast & Modern — Recommended)
npm create vite@latest my-react-app

🔹 Method 2: Using Create React App (CRA)
npx create-react-app my-react-app
cd my-react-app
npm start

react-proj-01/
│
├── node_modules/         # All installed dependencies (auto-created)
├── public/               # Static assets (like icons, images)
├── src/                  # Source code folder
│   ├── assets/           # Custom images, logos, etc.
│   ├── App.css           # Styles for your App component
│   ├── App.jsx           # Main app component
│   ├── index.css         # Global styles
│   └── main.jsx          # Entry point (connects React to index.html)
│
├── .gitignore            # Files ignored by Git
├── eslint.config.js      # Linting rules
├── index.html            # Root HTML file (loads your React app)
├── package-lock.json     # Dependency versions (auto-generated)
├── package.json          # Project metadata + scripts
├── README.md             # Project documentation
├── vite.config.js        # Vite build configuration
└── docs.txt              # (Your own file — optional)


Perfect 🔥 — this is a **super important topic** for mastering React and JavaScript fundamentals.

Let’s go step-by-step:

* First: **JavaScript Events** (the base for React event handling)
* Then: **All Important React Hooks** — what they do + examples

---

## 🎯 1️⃣ JavaScript Events

**Definition:**
An event is an action that happens in the browser — like a user click, key press, mouse move, or input change.
You can “listen” to these and “handle” them with **event listeners**.

---

### 🧠 Common JS Events

| Event         | Triggered When            | Example         |
| ------------- | ------------------------- | --------------- |
| `onclick`     | user clicks an element    | Button click    |
| `onmouseover` | mouse hovers over element | Hover effect    |
| `onkeydown`   | key is pressed            | Typing          |
| `onkeyup`     | key released              | Search typing   |
| `onchange`    | input value changes       | Form fields     |
| `onsubmit`    | form submitted            | Login form      |
| `onload`      | page fully loaded         | Initial scripts |

---

### ✅ Example — Basic Event Handling

```html
<!DOCTYPE html>
<html>
<body>
  <button onclick="showMsg()">Click Me</button>

  <script>
    function showMsg() {
      alert("Button Clicked!");
    }
  </script>
</body>
</html>
```

➡️ When user clicks the button → triggers the `onclick` event → runs `showMsg()`

---

### ✅ Example — `addEventListener`

```js
const btn = document.getElementById("btn");
btn.addEventListener("click", () => {
  console.log("Button Clicked!");
});
```

> `addEventListener(event, function)` is cleaner and allows multiple listeners.

---

### ⚛️ React version of Event Handling

React uses **camelCase** events and inline functions.

```jsx
function App() {
  function handleClick() {
    alert("Clicked in React!");
  }

  return <button onClick={handleClick}>Click Me</button>;
}
```

> ⚠️ In React, we use `onClick`, not `onclick`.
> React events are *synthetic* — React’s internal wrapper for browser events.

---

## ⚛️ 2️⃣ React Hooks — Complete Guide

Hooks are **functions that let you use React features (like state, lifecycle, etc.) inside functional components.**

---

### 🧩 1. `useState` — Manage State

Keeps track of changing data in your component.

```jsx
const [count, setCount] = useState(0);

<button onClick={() => setCount(count + 1)}>+</button>
<p>{count}</p>
```

💡 Whenever you update state → React re-renders the component.

---

### 🧩 2. `useEffect` — Side Effects (Run Code at Specific Times)

Used for actions like fetching data, timers, or interacting with DOM.

```jsx
useEffect(() => {
  console.log("Component Mounted!");
}, []); // empty array → run once
```

Variants:

* `[]` → run once (on mount)
* `[count]` → run every time `count` changes
* no array → run on every render

---

### 🧩 3. `useRef` — Access DOM Elements or Persist Values

Used to reference DOM nodes directly or store values that don’t re-render.

```jsx
const inputRef = useRef();

function focusInput() {
  inputRef.current.focus();
}

<input ref={inputRef} />
<button onClick={focusInput}>Focus Input</button>
```

---

### 🧩 4. `useContext` — Global Data (like Theme, Auth)

Lets you share data across components **without props**.

```jsx
const ThemeContext = React.createContext();

function App() {
  return (
    <ThemeContext.Provider value="dark">
      <Child />
    </ThemeContext.Provider>
  );
}

function Child() {
  const theme = useContext(ThemeContext);
  return <p>Theme is {theme}</p>;
}
```

---

### 🧩 5. `useReducer` — Advanced State Management

Good for managing complex state logic.

```jsx
function reducer(state, action) {
  switch (action.type) {
    case "INCREMENT": return { count: state.count + 1 };
    case "DECREMENT": return { count: state.count - 1 };
    default: return state;
  }
}

const [state, dispatch] = useReducer(reducer, { count: 0 });
```

---

### 🧩 6. `useMemo` — Optimize Expensive Calculations

Caches computed values so React doesn’t recalculate every render.

```jsx
const expensiveResult = useMemo(() => heavyFunction(num), [num]);
```

---

### 🧩 7. `useCallback` — Optimize Function Re-Creation

Keeps the same function reference between renders (helps performance).

```jsx
const handleClick = useCallback(() => {
  console.log("Clicked");
}, []);
```

---

### 🧩 8. `useLayoutEffect`

Like `useEffect`, but runs **synchronously** after DOM updates (used rarely for layout reads/writes).

---

### 🧩 9. `useImperativeHandle`

Used with `forwardRef()` to customize ref behavior between parent & child components.

---

### 🧩 10. `useId`

Generate unique IDs for accessibility or dynamic lists.

```jsx
const id = useId();
<label htmlFor={id}>Name</label>
<input id={id} />
```

---

### 🧩 11. `useTransition`

For smoother UI updates — marks a state change as “non-urgent”.

---

### 🧩 12. `useDeferredValue`

Delays rendering non-critical UI updates (useful for search results).

---

### 🧩 13. `useEffectEvent` *(React 19 upcoming)*

A cleaner way to handle events inside effects without dependency issues.

---

### 🧠 Summary Table

| Hook               | Purpose               | Example                       |
| ------------------ | --------------------- | ----------------------------- |
| `useState`         | State management      | Counters, forms               |
| `useEffect`        | Side effects          | Fetching API, timers          |
| `useRef`           | DOM refs              | Focus input, store prev value |
| `useContext`       | Global state          | Theme, Auth                   |
| `useReducer`       | Complex state logic   | Counters, forms               |
| `useMemo`          | Optimize calculations | Derived values                |
| `useCallback`      | Optimize functions    | Stable event handlers         |
| `useLayoutEffect`  | Layout updates        | DOM measuring                 |
| `useId`            | Unique IDs            | Forms, lists                  |
| `useTransition`    | Smooth UI updates     | Filters, search               |
| `useDeferredValue` | Delay updates         | Search results                |

---

### 🧩 Bonus: Custom Hooks

You can build your **own hooks** by combining others!

Example:

```jsx
function useWindowWidth() {
  const [width, setWidth] = useState(window.innerWidth);

  useEffect(() => {
    const handleResize = () => setWidth(window.innerWidth);
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  return width;
}
```

Now use it anywhere:

```jsx
const width = useWindowWidth();
<p>Width: {width}px</p>
---

## 🧠 1. `==` vs `===`

* **`==` (loose equality)** → compares *values* after type conversion
* **`===` (strict equality)** → compares *values and types*

```js
5 == "5"   // true (converts "5" to number)
5 === "5"  // false (different types)
```

✅ Always prefer `===` to avoid bugs.

---

## ⚙️ 2. `&&` and `||` (Logical AND / OR — but return values, not just true/false)

Unlike other languages, in JS these return the **actual operand**, not just a boolean.

```js
console.log(0 || "Hello");   // "Hello" (returns first truthy)
console.log(0 && "Hello");   // 0 (returns first falsy)
console.log("Hi" && "JS");   // "JS"
```

➡️ Often used in **conditional rendering**:

```jsx
{isLoggedIn && <Dashboard />}
```

---

## ⚡ 3. `??` (Nullish Coalescing Operator)

Returns the right side only if the left side is `null` or `undefined`.

```js
let name = null;
console.log(name ?? "Guest");  // "Guest"
```

> Different from `||` because `||` checks for *falsy* values (like `0`, `""`, `false`), while `??` only checks `null` or `undefined`.

---

## 💥 4. Ternary Operator `? :`

Shortcut for if-else — same in many languages, but used a lot in JSX.

```jsx
{isDarkMode ? <DarkTheme /> : <LightTheme />}
```

---

## 🔄 5. Spread Operator `...`

Used for copying or merging arrays/objects, and function arguments.

```js
const arr = [1, 2];
const newArr = [...arr, 3];  // [1, 2, 3]

const obj = { name: "A" };
const newObj = { ...obj, age: 21 }; // { name: "A", age: 21 }
```

---

## 🧩 6. Destructuring Operator

Unpacks arrays or objects.

```js
const [a, b] = [1, 2];
const { name, age } = { name: "Chetan", age: 21 };
```

---

## 🪄 7. Optional Chaining `?.`

Prevents errors when accessing properties that might not exist.

```js
console.log(user?.address?.city); // undefined (no crash!)
```

---

## ⚔️ 8. Typeof & Instanceof

```js
typeof 5           // "number"
typeof "hello"     // "string"
5 instanceof Number // false (primitive)
new Number(5) instanceof Number // true
```

---

## 🧮 9. `+=`, `++`, `--`, `**`

These work mostly the same, but `**` (exponentiation) is *newer* to JS.

```js
2 ** 3 // 8
```

---

## 🌀 10. Template Literals with Backticks

String interpolation — no need for `+` operator.

```js
let name = "Chetan";
console.log(`Hello ${name}!`);
```

---
